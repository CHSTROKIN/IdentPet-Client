{"version":3,"sources":["useInitProps.ts"],"names":["useInitProps","props","defaultIndex","data","rawData","loop","autoPlayInterval","_autoPlayInterval","scrollAnimationDuration","style","panGestureHandlerProps","autoFillData","enabled","pagingEnabled","overscrollEnabled","snapEnabled","enableSnap","_width","width","_height","height","Math","round","max","React","useMemo","dataLength","length","rawDataLength","mode","modeConfig","showLength"],"mappings":"8KAAA,oDAGA,2EAuBO,QAASA,CAAAA,YAAT,CACLC,KADK,CAEwB,uBAC7B,wBAgBIA,KAhBJ,CACEC,YADF,CACEA,YADF,8BACiB,CADjB,iCAgBID,KAhBJ,CAEEE,IAFF,CAEQC,OAFR,sBAEkB,EAFlB,yBAgBIH,KAhBJ,CAGEI,IAHF,CAGEA,IAHF,sBAGS,IAHT,mCAgBIJ,KAhBJ,CAIEK,gBAJF,CAIoBC,iBAJpB,gCAIwC,IAJxC,6CAgBIN,KAhBJ,CAKEO,uBALF,CAKEA,uBALF,gCAK4B,GAL5B,oCAgBIP,KAhBJ,CAMEQ,KANF,CAMEA,KANF,uBAMU,EANV,oCAgBIR,KAhBJ,CAOES,sBAPF,CAOEA,sBAPF,gCAO2B,EAP3B,2CAgBIT,KAhBJ,CAQEU,YARF,CAQEA,YARF,8BAQiB,IARjB,oCAgBIV,KAhBJ,CAUEW,OAVF,CAUEA,OAVF,yBAUY,IAVZ,qCAgBIX,KAhBJ,CAWEY,aAXF,CAWEA,aAXF,+BAWkB,IAXlB,4CAgBIZ,KAhBJ,CAYEa,iBAZF,CAYEA,iBAZF,gCAYsB,IAZtB,0CAgBIb,KAhBJ,CAaEc,WAbF,CAaEA,WAbF,gDAagBd,KAAK,CAACe,UAbtB,0BAaoC,IAbpC,oBAcSC,MAdT,CAgBIhB,KAhBJ,CAcEiB,KAdF,CAeUC,OAfV,CAgBIlB,KAhBJ,CAeEmB,MAfF,CAkBA,GAAMF,CAAAA,KAAK,CAAGG,IAAI,CAACC,KAAL,CAAWL,MAAM,EAAI,CAArB,CAAd,CACA,GAAMG,CAAAA,MAAM,CAAGC,IAAI,CAACC,KAAL,CAAWH,OAAO,EAAI,CAAtB,CAAf,CACA,GAAMb,CAAAA,gBAAgB,CAAGe,IAAI,CAACE,GAAL,CAAShB,iBAAT,CAA4B,CAA5B,CAAzB,CAEA,GAAMJ,CAAAA,IAAI,CAAGqB,eAAMC,OAAN,CACX,UAAM,CACJ,MAAO,+DAAoC,CACzCpB,IAAI,CAAJA,IADyC,CAEzCM,YAAY,CAAZA,YAFyC,CAGzCR,IAAI,CAAEC,OAHmC,CAIzCsB,UAAU,CAAEtB,OAAO,CAACuB,MAJqB,CAApC,CAAP,CAMD,CARU,CASX,CAACvB,OAAD,CAAUC,IAAV,CAAgBM,YAAhB,CATW,CAAb,CAYA,GAAMe,CAAAA,UAAU,CAAGvB,IAAI,CAACwB,MAAxB,CACA,GAAMC,CAAAA,aAAa,CAAGxB,OAAO,CAACuB,MAA9B,CAEA,GAAI1B,KAAK,CAAC4B,IAAN,GAAe,gBAAf,EAAmC5B,KAAK,CAAC4B,IAAN,GAAe,kBAAtD,CAA0E,6CACxE,GAAI,CAAC5B,KAAK,CAAC6B,UAAX,CACE7B,KAAK,CAAC6B,UAAN,CAAmB,EAAnB,CAEF7B,KAAK,CAAC6B,UAAN,CAAiBC,UAAjB,2CAA8B9B,KAAK,CAAC6B,UAApC,eAA8B,kBAAkBC,UAAhD,8BAA8DL,UAAU,CAAG,CAA3E,CACD,CAED,wBACKzB,KADL,EAEEC,YAAY,CAAZA,YAFF,CAGES,YAAY,CAAZA,YAHF,CAKER,IAAI,CAAJA,IALF,CAOEuB,UAAU,CAAVA,UAPF,CASEtB,OAAO,CAAPA,OATF,CAWEwB,aAAa,CAAbA,aAXF,CAYEvB,IAAI,CAAJA,IAZF,CAaEO,OAAO,CAAPA,OAbF,CAcEN,gBAAgB,CAAhBA,gBAdF,CAeEE,uBAAuB,CAAvBA,uBAfF,CAgBEC,KAAK,CAALA,KAhBF,CAiBEC,sBAAsB,CAAtBA,sBAjBF,CAkBEG,aAAa,CAAbA,aAlBF,CAmBEE,WAAW,CAAXA,WAnBF,CAoBED,iBAAiB,CAAjBA,iBApBF,CAqBEI,KAAK,CAALA,KArBF,CAsBEE,MAAM,CAANA,MAtBF,GAwBD","sourcesContent":["import React from \"react\";\n\nimport type { TCarouselProps } from \"../types\";\nimport { computedFillDataWithAutoFillData } from \"../utils/computedWithAutoFillData\";\n\ntype TGetRequiredProps<P extends keyof TCarouselProps> = Record<\nP,\nRequired<TCarouselProps>[P]\n>;\n\nexport type TInitializeCarouselProps<T> = TCarouselProps<T> &\nTGetRequiredProps<\n| \"defaultIndex\"\n| \"loop\"\n| \"width\"\n| \"height\"\n| \"scrollAnimationDuration\"\n| \"autoPlayInterval\"\n| \"autoFillData\"\n> & {\n  // Raw data that has not been processed\n  rawData: T[]\n  dataLength: number\n  rawDataLength: number\n};\n\nexport function useInitProps<T>(\n  props: TCarouselProps<T>,\n): TInitializeCarouselProps<T> {\n  const {\n    defaultIndex = 0,\n    data: rawData = [],\n    loop = true,\n    autoPlayInterval: _autoPlayInterval = 1000,\n    scrollAnimationDuration = 500,\n    style = {},\n    panGestureHandlerProps = {},\n    autoFillData = true,\n    // switchers\n    enabled = true,\n    pagingEnabled = true,\n    overscrollEnabled = true,\n    snapEnabled = props.enableSnap ?? true,\n    width: _width,\n    height: _height,\n  } = props;\n\n  const width = Math.round(_width || 0);\n  const height = Math.round(_height || 0);\n  const autoPlayInterval = Math.max(_autoPlayInterval, 0);\n\n  const data = React.useMemo<T[]>(\n    () => {\n      return computedFillDataWithAutoFillData<T>({\n        loop,\n        autoFillData,\n        data: rawData,\n        dataLength: rawData.length,\n      });\n    },\n    [rawData, loop, autoFillData],\n  );\n\n  const dataLength = data.length;\n  const rawDataLength = rawData.length;\n\n  if (props.mode === \"vertical-stack\" || props.mode === \"horizontal-stack\") {\n    if (!props.modeConfig)\n      props.modeConfig = {};\n\n    props.modeConfig.showLength = props.modeConfig?.showLength ?? dataLength - 1;\n  }\n\n  return {\n    ...props,\n    defaultIndex,\n    autoFillData,\n    // Fill data with autoFillData\n    data,\n    // Length of fill data\n    dataLength,\n    // Raw data that has not been processed\n    rawData,\n    // Length of raw data\n    rawDataLength,\n    loop,\n    enabled,\n    autoPlayInterval,\n    scrollAnimationDuration,\n    style,\n    panGestureHandlerProps,\n    pagingEnabled,\n    snapEnabled,\n    overscrollEnabled,\n    width,\n    height,\n  };\n}\n"]}