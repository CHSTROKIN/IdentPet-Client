{"version":3,"sources":["useVisibleRanges.tsx"],"names":["useVisibleRanges","options","total","viewSize","translation","windowSize","_windowSize","ranges","positiveCount","Math","round","negativeCount","curIndex","value","negativeRange","positiveRange"],"mappings":"mGACA,8D,m5EAOO,QAASA,CAAAA,gBAAT,CAA0BC,OAA1B,CAKY,CACjB,mBAKIA,OALJ,CACEC,KADF,CACEA,KADF,yBACU,CADV,gBAEEC,QAFF,CAKIF,OALJ,CAEEE,QAFF,CAGEC,WAHF,CAKIH,OALJ,CAGEG,WAHF,qBAKIH,OALJ,CAIEI,UAJF,CAIcC,WAJd,8BAI4B,CAJ5B,qBAOA,GAAMD,CAAAA,UAAU,CAAGH,KAAK,EAAII,WAAT,CAAuBJ,KAAvB,CAA+BI,WAAlD,CAEA,GAAMC,CAAAA,MAAM,CAAG,6GAAsB,CACnC,GAAMC,CAAAA,aAAa,CAAGC,IAAI,CAACC,KAAL,CAAWL,UAAU,CAAG,CAAxB,CAAtB,CACA,GAAMM,CAAAA,aAAa,CAAGN,UAAU,CAAGG,aAAnC,CACA,GAAII,CAAAA,QAAQ,CAAGH,IAAI,CAACC,KAAL,CAAW,CAACN,WAAW,CAACS,KAAb,CAAqBV,QAAhC,CAAf,CACAS,QAAQ,CAAGA,QAAQ,CAAG,CAAX,CAAgBA,QAAQ,CAAGV,KAAZ,CAAqBA,KAApC,CAA4CU,QAAvD,CACA,GAAME,CAAAA,aAAa,CAAG,CACpB,CAACF,QAAQ,CAAGD,aAAX,CAA2BT,KAA5B,EAAqCA,KADjB,CAEpB,CAACU,QAAQ,CAAG,CAAX,CAAeV,KAAhB,EAAyBA,KAFL,CAAtB,CAIA,GAAMa,CAAAA,aAAa,CAAG,CACpB,CAACH,QAAQ,CAAGV,KAAZ,EAAqBA,KADD,CAEpB,CAACU,QAAQ,CAAGJ,aAAX,CAA2BN,KAA5B,EAAqCA,KAFjB,CAAtB,CAIA,GAAIY,aAAa,CAAC,CAAD,CAAb,CAAmBZ,KAAnB,EAA4BY,aAAa,CAAC,CAAD,CAAb,CAAmBA,aAAa,CAAC,CAAD,CAAhE,CAAqE,CACnEA,aAAa,CAAC,CAAD,CAAb,CAAmBZ,KAAK,CAAG,CAA3B,CACAa,aAAa,CAAC,CAAD,CAAb,CAAmB,CAAnB,CACD,CACD,GAAIA,aAAa,CAAC,CAAD,CAAb,CAAmBA,aAAa,CAAC,CAAD,CAApC,CAAyC,CACvCD,aAAa,CAAC,CAAD,CAAb,CAAmBZ,KAAK,CAAG,CAA3B,CACAa,aAAa,CAAC,CAAD,CAAb,CAAmB,CAAnB,CACD,CACD,MAAO,CAAED,aAAa,CAAbA,aAAF,CAAiBC,aAAa,CAAbA,aAAjB,CAAP,CACD,CAtBc,yBArBOV,UAqBP,aApBYD,WAoBZ,UApBgCD,QAoBhC,OAXMD,KAWN,wIAsBZ,CAACA,KAAD,CAAQG,UAAR,CAAoBD,WAApB,CAtBY,CAAf,CAwBA,MAAOG,CAAAA,MAAP,CACD","sourcesContent":["import type Animated from \"react-native-reanimated\";\nimport { useDerivedValue } from \"react-native-reanimated\";\n\nexport type IVisibleRanges = Animated.SharedValue<{\n  negativeRange: number[]\n  positiveRange: number[]\n}>;\n\nexport function useVisibleRanges(options: {\n  total: number\n  viewSize: number\n  windowSize?: number\n  translation: Animated.SharedValue<number>\n}): IVisibleRanges {\n  const {\n    total = 0,\n    viewSize,\n    translation,\n    windowSize: _windowSize = 0,\n  } = options;\n\n  const windowSize = total <= _windowSize ? total : _windowSize;\n\n  const ranges = useDerivedValue(() => {\n    const positiveCount = Math.round(windowSize / 2);\n    const negativeCount = windowSize - positiveCount;\n    let curIndex = Math.round(-translation.value / viewSize);\n    curIndex = curIndex < 0 ? (curIndex % total) + total : curIndex;\n    const negativeRange = [\n      (curIndex - negativeCount + total) % total,\n      (curIndex - 1 + total) % total,\n    ];\n    const positiveRange = [\n      (curIndex + total) % total,\n      (curIndex + positiveCount + total) % total,\n    ];\n    if (negativeRange[0] < total && negativeRange[0] > negativeRange[1]) {\n      negativeRange[1] = total - 1;\n      positiveRange[0] = 0;\n    }\n    if (positiveRange[0] > positiveRange[1]) {\n      negativeRange[1] = total - 1;\n      positiveRange[0] = 0;\n    }\n    return { negativeRange, positiveRange };\n  }, [total, windowSize, translation]);\n\n  return ranges;\n}\n"]}