{"version":3,"sources":["useOnProgressChange.ts"],"names":["runOnJS","useAnimatedReaction","computedOffsetXValueWithAutoFillData","useOnProgressChange","opts","autoFillData","loop","offsetX","size","rawDataLength","onProgressChange","value","_value","Math","max","min","absoluteProgress","abs"],"mappings":"AACA,SACEA,OADF,EAEEC,mBAFF,QAGO,yBAHP;AAMA,SAASC,oCAAT,QAAqD,mCAArD;AAEA,OAAO,SAASC,mBAAT,CACLC,IADK,EAQL;AACA,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA,IAAhB;AAAsBC,IAAAA,OAAtB;AAA+BC,IAAAA,IAA/B;AAAqCC,IAAAA,aAArC;AAAoDC,IAAAA;AAApD,MACEN,IADR;AAGAH,EAAAA,mBAAmB,CACjB,MAAMM,OAAO,CAACI,KADG,EAEhBC,MAAD,IAAY;AACV,QAAID,KAAK,GAAGT,oCAAoC,CAAC;AAC/CS,MAAAA,KAAK,EAAEC,MADwC;AAE/CH,MAAAA,aAF+C;AAG/CD,MAAAA,IAH+C;AAI/CH,MAAAA,YAJ+C;AAK/CC,MAAAA;AAL+C,KAAD,CAAhD;;AAQA,QAAI,CAACA,IAAL,EAAW;AACTK,MAAAA,KAAK,GAAGE,IAAI,CAACC,GAAL,CACN,EAAE,CAACL,aAAa,GAAG,CAAjB,IAAsBD,IAAxB,CADM,EAENK,IAAI,CAACE,GAAL,CAASJ,KAAT,EAAgB,CAAhB,CAFM,CAAR;AAID;;AAED,QAAIK,gBAAgB,GAAGH,IAAI,CAACI,GAAL,CAASN,KAAK,GAAGH,IAAjB,CAAvB;AAEA,QAAIG,KAAK,GAAG,CAAZ,EACEK,gBAAgB,GAAGP,aAAa,GAAGO,gBAAnC;AAEF,QAAIN,gBAAJ,EACEV,OAAO,CAACU,gBAAD,CAAP,CAA0BC,KAA1B,EAAiCK,gBAAjC;AACH,GAzBgB,EA0BjB,CAACV,IAAD,EAAOD,YAAP,EAAqBI,aAArB,EAAoCC,gBAApC,CA1BiB,CAAnB;AA4BD","sourcesContent":["import type Animated from \"react-native-reanimated\";\nimport {\n  runOnJS,\n  useAnimatedReaction,\n} from \"react-native-reanimated\";\n\nimport type { TCarouselProps } from \"../types\";\nimport { computedOffsetXValueWithAutoFillData } from \"../utils/computedWithAutoFillData\";\n\nexport function useOnProgressChange(\n  opts: {\n    size: number\n    autoFillData: boolean\n    loop: boolean\n    offsetX: Animated.SharedValue<number>\n    rawDataLength: number\n  } & Pick<TCarouselProps, \"onProgressChange\">,\n) {\n  const { autoFillData, loop, offsetX, size, rawDataLength, onProgressChange }\n        = opts;\n\n  useAnimatedReaction(\n    () => offsetX.value,\n    (_value) => {\n      let value = computedOffsetXValueWithAutoFillData({\n        value: _value,\n        rawDataLength,\n        size,\n        autoFillData,\n        loop,\n      });\n\n      if (!loop) {\n        value = Math.max(\n          -((rawDataLength - 1) * size),\n          Math.min(value, 0),\n        );\n      }\n\n      let absoluteProgress = Math.abs(value / size);\n\n      if (value > 0)\n        absoluteProgress = rawDataLength - absoluteProgress;\n\n      if (onProgressChange)\n        runOnJS(onProgressChange)(value, absoluteProgress);\n    },\n    [loop, autoFillData, rawDataLength, onProgressChange],\n  );\n}\n"]}