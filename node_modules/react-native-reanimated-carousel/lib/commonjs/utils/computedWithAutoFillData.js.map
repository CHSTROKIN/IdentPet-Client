{"version":3,"sources":["computedWithAutoFillData.ts"],"names":["SINGLE_ITEM","DATA_LENGTH","DOUBLE_ITEM","isAutoFillData","params","loop","autoFillData","convertToSharedIndex","rawDataLength","index","computedOffsetXValueWithAutoFillData","value","size","computedRealIndexWithAutoFillData","dataLength","computedFillDataWithAutoFillData","data"],"mappings":"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","sourcesContent":["import { DATA_LENGTH } from \"../constants\";\n\nconst { SINGLE_ITEM, DOUBLE_ITEM } = DATA_LENGTH;\n\nfunction isAutoFillData(params: { autoFillData: boolean; loop: boolean }) {\n  \"worklet\";\n  return !!params.loop && !!params.autoFillData;\n}\n\ntype BaseParams<T extends object = {}> = {\n  autoFillData: boolean\n  loop: boolean\n} & T;\n\nexport function convertToSharedIndex(\n  params: BaseParams<{ index: number; rawDataLength: number }>,\n) {\n  \"worklet\";\n  const { loop, rawDataLength, index, autoFillData } = params;\n\n  if (isAutoFillData({ loop, autoFillData })) {\n    switch (rawDataLength) {\n      case SINGLE_ITEM:\n        return 0;\n      case DOUBLE_ITEM:\n        return index % 2;\n    }\n  }\n\n  return index;\n}\n\nexport function computedOffsetXValueWithAutoFillData(\n  params: BaseParams<{\n    rawDataLength: number\n    value: number\n    size: number\n  }>,\n) {\n  \"worklet\";\n\n  const { rawDataLength, value, size, loop, autoFillData } = params;\n\n  if (isAutoFillData({ loop, autoFillData })) {\n    switch (rawDataLength) {\n      case SINGLE_ITEM:\n        return value % size;\n      case DOUBLE_ITEM:\n        return value % (size * 2);\n    }\n  }\n\n  return value;\n}\n\nexport function computedRealIndexWithAutoFillData(\n  params: BaseParams<{\n    index: number\n    dataLength: number\n  }>,\n) {\n  const { index, dataLength, loop, autoFillData } = params;\n\n  if (isAutoFillData({ loop, autoFillData })) {\n    switch (dataLength) {\n      case SINGLE_ITEM:\n        return index % 1;\n      case DOUBLE_ITEM:\n        return index % 2;\n    }\n  }\n\n  return index;\n}\n\nexport function computedFillDataWithAutoFillData<T>(\n  params: BaseParams<{\n    data: T[]\n    dataLength: number\n  }>,\n): T[] {\n  const { data, loop, autoFillData, dataLength } = params;\n\n  if (isAutoFillData({ loop, autoFillData })) {\n    switch (dataLength) {\n      case SINGLE_ITEM:\n        return [data[0], data[0], data[0]];\n      case DOUBLE_ITEM:\n        return [data[0], data[1], data[0], data[1]];\n    }\n  }\n\n  return data;\n}\n"]}