{"version":3,"sources":["useCommonVariables.ts"],"names":["React","useSharedValue","useAnimatedReaction","computeNewIndexWhenDataChanges","handlerOffsetDirection","useCommonVariables","props","vertical","height","width","dataLength","defaultIndex","defaultScrollOffsetValue","loop","size","validLength","defaultHandlerOffsetValue","Math","abs","_handlerOffset","handlerOffset","prevDataLength","useEffect","value","previousLength","currentLength","isLengthChanged","shouldComputed","direction"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,cAAT,EAAyBC,mBAAzB,QAAoD,yBAApD;AAEA,SAASC,8BAAT,QAA+C,kCAA/C;AAGA,SAASC,sBAAT,QAAuC,iCAAvC;AAQA,OAAO,SAASC,kBAAT,CACLC,KADK,EAEa;AAClB,QAAM;AACJC,IAAAA,QADI;AAEJC,IAAAA,MAFI;AAGJC,IAAAA,KAHI;AAIJC,IAAAA,UAJI;AAKJC,IAAAA,YALI;AAMJC,IAAAA,wBANI;AAOJC,IAAAA;AAPI,MAQFP,KARJ;AASA,QAAMQ,IAAI,GAAGP,QAAQ,GAAGC,MAAH,GAAYC,KAAjC;AACA,QAAMM,WAAW,GAAGL,UAAU,GAAG,CAAjC;AACA,QAAMM,yBAAyB,GAAG,CAACC,IAAI,CAACC,GAAL,CAASP,YAAY,GAAGG,IAAxB,CAAnC;;AACA,QAAMK,cAAc,GAAGlB,cAAc,CAASe,yBAAT,CAArC;;AACA,QAAMI,aAAa,GAAGR,wBAAH,aAAGA,wBAAH,cAAGA,wBAAH,GAA+BO,cAAlD;AACA,QAAME,cAAc,GAAGpB,cAAc,CAACS,UAAD,CAArC;AAEAV,EAAAA,KAAK,CAACsB,SAAN,CAAgB,MAAM;AACpBF,IAAAA,aAAa,CAACG,KAAd,GAAsBP,yBAAtB;AACD,GAFD,EAEG,CAACT,QAAD,EAAWa,aAAX,EAA0BJ,yBAA1B,CAFH;AAIAd,EAAAA,mBAAmB,CAAC,MAAM;AACxB,UAAMsB,cAAc,GAAGH,cAAc,CAACE,KAAtC;AACA,UAAME,aAAa,GAAGf,UAAtB;AACA,UAAMgB,eAAe,GAAGF,cAAc,KAAKC,aAA3C;AACA,UAAME,cAAc,GAAGD,eAAe,IAAIb,IAA1C;AAEA,QAAIc,cAAJ,EACEN,cAAc,CAACE,KAAf,GAAuBb,UAAvB;AAEF,WAAO;AACLiB,MAAAA,cADK;AAELH,MAAAA,cAFK;AAGLC,MAAAA;AAHK,KAAP;AAKD,GAdkB,EAchB,QAAuD;AAAA,QAAtD;AAAEE,MAAAA,cAAF;AAAkBH,MAAAA,cAAlB;AAAkCC,MAAAA;AAAlC,KAAsD;;AACxD,QAAIE,cAAJ,EAAoB;AAClB;AACA,YAAMC,SAAS,GAAGxB,sBAAsB,CAACgB,aAAD,CAAxC;AAEAA,MAAAA,aAAa,CAACG,KAAd,GAAsBpB,8BAA8B,CAAC;AACnDyB,QAAAA,SADmD;AAEnDJ,QAAAA,cAFmD;AAGnDC,QAAAA,aAHmD;AAInDX,QAAAA,IAJmD;AAKnDM,QAAAA,aAAa,EAAEA,aAAa,CAACG;AALsB,OAAD,CAApD;AAOD;AACF,GA3BkB,EA2BhB,CAACb,UAAD,EAAaG,IAAb,CA3BgB,CAAnB;AA6BA,SAAO;AACLC,IAAAA,IADK;AAELC,IAAAA,WAFK;AAGLK,IAAAA;AAHK,GAAP;AAKD","sourcesContent":["import React from \"react\";\nimport type Animated from \"react-native-reanimated\";\nimport { useSharedValue, useAnimatedReaction } from \"react-native-reanimated\";\n\nimport { computeNewIndexWhenDataChanges } from \"./computeNewIndexWhenDataChanges\";\nimport type { TInitializeCarouselProps } from \"./useInitProps\";\n\nimport { handlerOffsetDirection } from \"../utils/handlerOffsetDirection\";\n\ninterface ICommonVariables {\n  size: number\n  validLength: number\n  handlerOffset: Animated.SharedValue<number>\n}\n\nexport function useCommonVariables(\n  props: TInitializeCarouselProps<any>,\n): ICommonVariables {\n  const {\n    vertical,\n    height,\n    width,\n    dataLength,\n    defaultIndex,\n    defaultScrollOffsetValue,\n    loop,\n  } = props;\n  const size = vertical ? height : width;\n  const validLength = dataLength - 1;\n  const defaultHandlerOffsetValue = -Math.abs(defaultIndex * size);\n  const _handlerOffset = useSharedValue<number>(defaultHandlerOffsetValue);\n  const handlerOffset = defaultScrollOffsetValue ?? _handlerOffset;\n  const prevDataLength = useSharedValue(dataLength);\n\n  React.useEffect(() => {\n    handlerOffset.value = defaultHandlerOffsetValue;\n  }, [vertical, handlerOffset, defaultHandlerOffsetValue]);\n\n  useAnimatedReaction(() => {\n    const previousLength = prevDataLength.value;\n    const currentLength = dataLength;\n    const isLengthChanged = previousLength !== currentLength;\n    const shouldComputed = isLengthChanged && loop;\n\n    if (shouldComputed)\n      prevDataLength.value = dataLength;\n\n    return {\n      shouldComputed,\n      previousLength,\n      currentLength,\n    };\n  }, ({ shouldComputed, previousLength, currentLength }) => {\n    if (shouldComputed) {\n      // direction -> 1 | -1\n      const direction = handlerOffsetDirection(handlerOffset);\n\n      handlerOffset.value = computeNewIndexWhenDataChanges({\n        direction,\n        previousLength,\n        currentLength,\n        size,\n        handlerOffset: handlerOffset.value,\n      });\n    }\n  }, [dataLength, loop]);\n\n  return {\n    size,\n    validLength,\n    handlerOffset,\n  };\n}\n"]}