{"version":3,"sources":["index.test.ts"],"names":["computeNewIndexWhenDataChanges","describe","size","positive","negative","params","currentIndex","direction","_direction","previousLength","currentLength","handlerOffset","it","expect","toBe"],"mappings":"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","sourcesContent":["import { computeNewIndexWhenDataChanges } from \"./computeNewIndexWhenDataChanges\";\n\ndescribe(\"should work as expected\", () => {\n  const size = 375;\n  const positive = -1;\n  const negative = 1;\n\n  const params = (params: {\n    direction: \"positive\" | \"negative\"\n    currentIndex: number\n    previousLength: number\n    currentLength: number\n  }) => {\n    const { currentIndex, direction: _direction, previousLength, currentLength } = params;\n    const direction = _direction === \"negative\" ? negative : positive;\n    return {\n      direction,\n      handlerOffset: size * currentIndex * direction,\n      size,\n      previousLength,\n      currentLength,\n    };\n  };\n\n  it(\"The direction is negative, And changing length of data set from 4 to 3, the new index will to be 2.\", async () => {\n    const currentIndex = 1;\n    const handlerOffset = computeNewIndexWhenDataChanges(params({\n      currentIndex,\n      direction: \"negative\",\n      previousLength: 4,\n      currentLength: 3,\n    }));\n\n    expect(handlerOffset / size).toBe(2 * positive);\n  });\n\n  it(\"The direction is negative, Changing length of data set from 4 to 3, the index remains original.\", async () => {\n    const handlerOffset = computeNewIndexWhenDataChanges(params({\n      currentIndex: 2,\n      direction: \"negative\",\n      previousLength: 4,\n      currentLength: 3,\n    }));\n\n    expect(handlerOffset / size).toBe(1 * negative);\n  });\n\n  it(\"The direction is positive, Changing length of data set from 4 to 5, the index remains original.\", async () => {\n    const handlerOffset = computeNewIndexWhenDataChanges(params({\n      currentIndex: 3,\n      direction: \"positive\",\n      previousLength: 4,\n      currentLength: 5,\n    }));\n\n    expect(handlerOffset / size).toBe(3 * positive);\n  });\n\n  it(\"The direction is negative, Changing length of data set from 4 to 5, the index remains original.\", async () => {\n    const handlerOffset = computeNewIndexWhenDataChanges(params({\n      currentIndex: 3,\n      direction: \"negative\",\n      previousLength: 4,\n      currentLength: 5,\n    }));\n\n    expect(handlerOffset / size).toBe(4 * negative);\n  });\n\n  it(\"Changing length of data set from 0 to 3, the index remains original.\", async () => {\n    const handlerOffset = computeNewIndexWhenDataChanges(params({\n      currentIndex: 0,\n      direction: \"positive\",\n      previousLength: 0,\n      currentLength: 3,\n    }));\n\n    expect(handlerOffset / size).toBe(0 * positive);\n  });\n});\n"]}