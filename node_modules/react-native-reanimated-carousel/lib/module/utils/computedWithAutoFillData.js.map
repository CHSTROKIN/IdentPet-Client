{"version":3,"sources":["computedWithAutoFillData.ts"],"names":["DATA_LENGTH","SINGLE_ITEM","DOUBLE_ITEM","isAutoFillData","params","loop","autoFillData","convertToSharedIndex","rawDataLength","index","computedOffsetXValueWithAutoFillData","value","size","computedRealIndexWithAutoFillData","dataLength","computedFillDataWithAutoFillData","data"],"mappings":"AAAA,SAASA,WAAT,QAA4B,cAA5B;AAEA,MAAM;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,IAA+BF,WAArC;;AAEA,SAASG,cAAT,CAAwBC,MAAxB,EAA0E;AACxE;;AACA,SAAO,CAAC,CAACA,MAAM,CAACC,IAAT,IAAiB,CAAC,CAACD,MAAM,CAACE,YAAjC;AACD;;AAOD,OAAO,SAASC,oBAAT,CACLH,MADK,EAEL;AACA;;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQG,IAAAA,aAAR;AAAuBC,IAAAA,KAAvB;AAA8BH,IAAAA;AAA9B,MAA+CF,MAArD;;AAEA,MAAID,cAAc,CAAC;AAAEE,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAD,CAAlB,EAA4C;AAC1C,YAAQE,aAAR;AACE,WAAKP,WAAL;AACE,eAAO,CAAP;;AACF,WAAKC,WAAL;AACE,eAAOO,KAAK,GAAG,CAAf;AAJJ;AAMD;;AAED,SAAOA,KAAP;AACD;AAED,OAAO,SAASC,oCAAT,CACLN,MADK,EAML;AACA;;AAEA,QAAM;AAAEI,IAAAA,aAAF;AAAiBG,IAAAA,KAAjB;AAAwBC,IAAAA,IAAxB;AAA8BP,IAAAA,IAA9B;AAAoCC,IAAAA;AAApC,MAAqDF,MAA3D;;AAEA,MAAID,cAAc,CAAC;AAAEE,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAD,CAAlB,EAA4C;AAC1C,YAAQE,aAAR;AACE,WAAKP,WAAL;AACE,eAAOU,KAAK,GAAGC,IAAf;;AACF,WAAKV,WAAL;AACE,eAAOS,KAAK,IAAIC,IAAI,GAAG,CAAX,CAAZ;AAJJ;AAMD;;AAED,SAAOD,KAAP;AACD;AAED,OAAO,SAASE,iCAAT,CACLT,MADK,EAKL;AACA,QAAM;AAAEK,IAAAA,KAAF;AAASK,IAAAA,UAAT;AAAqBT,IAAAA,IAArB;AAA2BC,IAAAA;AAA3B,MAA4CF,MAAlD;;AAEA,MAAID,cAAc,CAAC;AAAEE,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAD,CAAlB,EAA4C;AAC1C,YAAQQ,UAAR;AACE,WAAKb,WAAL;AACE,eAAOQ,KAAK,GAAG,CAAf;;AACF,WAAKP,WAAL;AACE,eAAOO,KAAK,GAAG,CAAf;AAJJ;AAMD;;AAED,SAAOA,KAAP;AACD;AAED,OAAO,SAASM,gCAAT,CACLX,MADK,EAKA;AACL,QAAM;AAAEY,IAAAA,IAAF;AAAQX,IAAAA,IAAR;AAAcC,IAAAA,YAAd;AAA4BQ,IAAAA;AAA5B,MAA2CV,MAAjD;;AAEA,MAAID,cAAc,CAAC;AAAEE,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAD,CAAlB,EAA4C;AAC1C,YAAQQ,UAAR;AACE,WAAKb,WAAL;AACE,eAAO,CAACe,IAAI,CAAC,CAAD,CAAL,EAAUA,IAAI,CAAC,CAAD,CAAd,EAAmBA,IAAI,CAAC,CAAD,CAAvB,CAAP;;AACF,WAAKd,WAAL;AACE,eAAO,CAACc,IAAI,CAAC,CAAD,CAAL,EAAUA,IAAI,CAAC,CAAD,CAAd,EAAmBA,IAAI,CAAC,CAAD,CAAvB,EAA4BA,IAAI,CAAC,CAAD,CAAhC,CAAP;AAJJ;AAMD;;AAED,SAAOA,IAAP;AACD","sourcesContent":["import { DATA_LENGTH } from \"../constants\";\n\nconst { SINGLE_ITEM, DOUBLE_ITEM } = DATA_LENGTH;\n\nfunction isAutoFillData(params: { autoFillData: boolean; loop: boolean }) {\n  \"worklet\";\n  return !!params.loop && !!params.autoFillData;\n}\n\ntype BaseParams<T extends object = {}> = {\n  autoFillData: boolean\n  loop: boolean\n} & T;\n\nexport function convertToSharedIndex(\n  params: BaseParams<{ index: number; rawDataLength: number }>,\n) {\n  \"worklet\";\n  const { loop, rawDataLength, index, autoFillData } = params;\n\n  if (isAutoFillData({ loop, autoFillData })) {\n    switch (rawDataLength) {\n      case SINGLE_ITEM:\n        return 0;\n      case DOUBLE_ITEM:\n        return index % 2;\n    }\n  }\n\n  return index;\n}\n\nexport function computedOffsetXValueWithAutoFillData(\n  params: BaseParams<{\n    rawDataLength: number\n    value: number\n    size: number\n  }>,\n) {\n  \"worklet\";\n\n  const { rawDataLength, value, size, loop, autoFillData } = params;\n\n  if (isAutoFillData({ loop, autoFillData })) {\n    switch (rawDataLength) {\n      case SINGLE_ITEM:\n        return value % size;\n      case DOUBLE_ITEM:\n        return value % (size * 2);\n    }\n  }\n\n  return value;\n}\n\nexport function computedRealIndexWithAutoFillData(\n  params: BaseParams<{\n    index: number\n    dataLength: number\n  }>,\n) {\n  const { index, dataLength, loop, autoFillData } = params;\n\n  if (isAutoFillData({ loop, autoFillData })) {\n    switch (dataLength) {\n      case SINGLE_ITEM:\n        return index % 1;\n      case DOUBLE_ITEM:\n        return index % 2;\n    }\n  }\n\n  return index;\n}\n\nexport function computedFillDataWithAutoFillData<T>(\n  params: BaseParams<{\n    data: T[]\n    dataLength: number\n  }>,\n): T[] {\n  const { data, loop, autoFillData, dataLength } = params;\n\n  if (isAutoFillData({ loop, autoFillData })) {\n    switch (dataLength) {\n      case SINGLE_ITEM:\n        return [data[0], data[0], data[0]];\n      case DOUBLE_ITEM:\n        return [data[0], data[1], data[0], data[1]];\n    }\n  }\n\n  return data;\n}\n"]}