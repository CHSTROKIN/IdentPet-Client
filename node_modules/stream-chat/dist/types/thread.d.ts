import { StreamChat } from './client';
import { DefaultGenerics, ExtendableGenerics, MessageResponse, ThreadResponse, ChannelResponse, FormatMessageResponse, ReactionResponse, UserResponse } from './types';
declare type ThreadReadStatus<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = Record<string, {
    last_read: Date;
    last_read_message_id: string;
    unread_messages: number;
    user: UserResponse<StreamChatGenerics>;
}>;
export declare class Thread<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> {
    id: string;
    latestReplies: FormatMessageResponse<StreamChatGenerics>[];
    participants: ThreadResponse['thread_participants'];
    message: FormatMessageResponse<StreamChatGenerics>;
    channel: ChannelResponse<StreamChatGenerics>;
    _channel: ReturnType<StreamChat<StreamChatGenerics>['channel']>;
    replyCount: number;
    _client: StreamChat<StreamChatGenerics>;
    read: ThreadReadStatus<StreamChatGenerics>;
    data: Record<string, any>;
    constructor(client: StreamChat<StreamChatGenerics>, t: ThreadResponse<StreamChatGenerics>);
    getClient(): StreamChat<StreamChatGenerics>;
    /**
     * addReply - Adds or updates a latestReplies to the thread
     *
     * @param {MessageResponse<StreamChatGenerics>} message reply message to be added.
     */
    addReply(message: MessageResponse<StreamChatGenerics>): void;
    updateReply(message: MessageResponse<StreamChatGenerics>): void;
    updateMessageOrReplyIfExists(message: MessageResponse<StreamChatGenerics>): void;
    addReaction(reaction: ReactionResponse<StreamChatGenerics>, message?: MessageResponse<StreamChatGenerics>, enforce_unique?: boolean): void;
    removeReaction(reaction: ReactionResponse<StreamChatGenerics>, message?: MessageResponse<StreamChatGenerics>): void;
}
export {};
//# sourceMappingURL=thread.d.ts.map