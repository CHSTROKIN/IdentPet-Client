{"version":3,"sources":["../../../../../src/start/server/metro/MetroBundlerDevServer.ts"],"sourcesContent":["/**\n * Copyright Â© 2022 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { getConfig } from '@expo/config';\nimport * as runtimeEnv from '@expo/env';\nimport { SerialAsset } from '@expo/metro-config/build/serializer/serializerAssets';\nimport assert from 'assert';\nimport chalk from 'chalk';\nimport { TransformInputOptions } from 'metro';\nimport baseJSBundle from 'metro/src/DeltaBundler/Serializers/baseJSBundle';\nimport {\n  sourceMapGeneratorNonBlocking,\n  type SourceMapGeneratorOptions,\n} from 'metro/src/DeltaBundler/Serializers/sourceMapGenerator';\nimport bundleToString from 'metro/src/lib/bundleToString';\nimport { TransformProfile } from 'metro-babel-transformer';\nimport type { CustomResolverOptions } from 'metro-resolver/src/types';\nimport path from 'path';\n\nimport { createRouteHandlerMiddleware } from './createServerRouteMiddleware';\nimport { ExpoRouterServerManifestV1, fetchManifest } from './fetchRouterManifest';\nimport { instantiateMetroAsync } from './instantiateMetro';\nimport { getErrorOverlayHtmlAsync } from './metroErrorInterface';\nimport { MetroPrivateServer, assertMetroPrivateServer } from './metroPrivateServer';\nimport { metroWatchTypeScriptFiles } from './metroWatchTypeScriptFiles';\nimport {\n  getRouterDirectoryModuleIdWithManifest,\n  hasWarnedAboutApiRoutes,\n  isApiRouteConvention,\n  warnInvalidWebOutput,\n} from './router';\nimport { serializeHtmlWithAssets } from './serializeHtml';\nimport { observeAnyFileChanges, observeFileChanges } from './waitForMetroToObserveTypeScriptFile';\nimport { BundleAssetWithFileHashes, ExportAssetMap } from '../../../export/saveAssets';\nimport { Log } from '../../../log';\nimport getDevClientProperties from '../../../utils/analytics/getDevClientProperties';\nimport { env } from '../../../utils/env';\nimport { CommandError } from '../../../utils/errors';\nimport { getFreePortAsync } from '../../../utils/port';\nimport { logEventAsync } from '../../../utils/telemetry';\nimport { BundlerDevServer, BundlerStartOptions, DevServerInstance } from '../BundlerDevServer';\nimport {\n  cachedSourceMaps,\n  evalMetroAndWrapFunctions,\n  evalMetroNoHandling,\n} from '../getStaticRenderFunctions';\nimport { ContextModuleSourceMapsMiddleware } from '../middleware/ContextModuleSourceMapsMiddleware';\nimport { CreateFileMiddleware } from '../middleware/CreateFileMiddleware';\nimport { DevToolsPluginMiddleware } from '../middleware/DevToolsPluginMiddleware';\nimport { FaviconMiddleware } from '../middleware/FaviconMiddleware';\nimport { HistoryFallbackMiddleware } from '../middleware/HistoryFallbackMiddleware';\nimport { InterstitialPageMiddleware } from '../middleware/InterstitialPageMiddleware';\nimport { resolveMainModuleName } from '../middleware/ManifestMiddleware';\nimport { ReactDevToolsPageMiddleware } from '../middleware/ReactDevToolsPageMiddleware';\nimport {\n  DeepLinkHandler,\n  RuntimeRedirectMiddleware,\n} from '../middleware/RuntimeRedirectMiddleware';\nimport { ServeStaticMiddleware } from '../middleware/ServeStaticMiddleware';\nimport {\n  ExpoMetroOptions,\n  createBundleUrlPath,\n  getAsyncRoutesFromExpoConfig,\n  getBaseUrlFromExpoConfig,\n  getMetroDirectBundleOptions,\n  shouldEnableAsyncImports,\n} from '../middleware/metroOptions';\nimport { prependMiddleware } from '../middleware/mutations';\nimport { startTypescriptTypeGenerationAsync } from '../type-generation/startTypescriptTypeGeneration';\n\nexport type ExpoRouterRuntimeManifest = Awaited<\n  ReturnType<typeof import('expo-router/build/static/renderStaticContent').getManifest>\n>;\n\ntype MetroOnProgress = NonNullable<\n  import('metro/src/DeltaBundler/types').Options<void>['onProgress']\n>;\n\nconst debug = require('debug')('expo:start:server:metro') as typeof console.log;\n\nconst getGraphId = require('metro/src/lib/getGraphId') as (\n  entryFile: string,\n  options: any,\n  etc: {\n    shallow: boolean;\n    lazy: boolean;\n    unstable_allowRequireContext: boolean;\n    resolverOptions: unknown;\n  }\n) => string;\n\n/** Default port to use for apps running in Expo Go. */\nconst EXPO_GO_METRO_PORT = 8081;\n\n/** Default port to use for apps that run in standard React Native projects or Expo Dev Clients. */\nconst DEV_CLIENT_METRO_PORT = 8081;\n\nexport class MetroBundlerDevServer extends BundlerDevServer {\n  private metro: MetroPrivateServer | null = null;\n\n  get name(): string {\n    return 'metro';\n  }\n\n  async resolvePortAsync(options: Partial<BundlerStartOptions> = {}): Promise<number> {\n    const port =\n      // If the manually defined port is busy then an error should be thrown...\n      options.port ??\n      // Otherwise use the default port based on the runtime target.\n      (options.devClient\n        ? // Don't check if the port is busy if we're using the dev client since most clients are hardcoded to 8081.\n          Number(process.env.RCT_METRO_PORT) || DEV_CLIENT_METRO_PORT\n        : // Otherwise (running in Expo Go) use a free port that falls back on the classic 8081 port.\n          await getFreePortAsync(EXPO_GO_METRO_PORT));\n\n    return port;\n  }\n\n  async exportExpoRouterApiRoutesAsync({\n    includeSourceMaps,\n    outputDir,\n    prerenderManifest,\n  }: {\n    includeSourceMaps?: boolean;\n    outputDir: string;\n    // This does not contain the API routes info.\n    prerenderManifest: ExpoRouterServerManifestV1;\n  }): Promise<{ files: ExportAssetMap; manifest: ExpoRouterServerManifestV1<string> }> {\n    const { routerRoot } = this.instanceMetroOptions;\n    assert(\n      routerRoot != null,\n      'The server must be started before calling exportExpoRouterApiRoutesAsync.'\n    );\n\n    const appDir = path.join(this.projectRoot, routerRoot);\n    const manifest = await this.getExpoRouterRoutesManifestAsync({ appDir });\n\n    const files: ExportAssetMap = new Map();\n\n    for (const route of manifest.apiRoutes) {\n      const filepath = path.join(appDir, route.file);\n      const contents = await this.bundleApiRoute(filepath);\n      const artifactFilename = path.join(\n        outputDir,\n        path.relative(appDir, filepath.replace(/\\.[tj]sx?$/, '.js'))\n      );\n      if (contents) {\n        let src = contents.src;\n        if (includeSourceMaps && contents.map) {\n          // TODO(kitten): Merge the source map transformer in the future\n          // https://github.com/expo/expo/blob/0dffdb15/packages/%40expo/metro-config/src/serializer/serializeChunks.ts#L422-L439\n          // Alternatively, check whether `sourcesRoot` helps here\n          const artifactBasename = encodeURIComponent(path.basename(artifactFilename) + '.map');\n          src = src.replace(\n            /\\/\\/# sourceMappingURL=.*/g,\n            `//# sourceMappingURL=${artifactBasename}`\n          );\n\n          const parsedMap = JSON.parse(contents.map);\n          files.set(artifactFilename + '.map', {\n            contents: JSON.stringify({\n              version: parsedMap.version,\n              sources: parsedMap.sources.map((source: string) => {\n                source =\n                  typeof source === 'string' && source.startsWith(this.projectRoot)\n                    ? path.relative(this.projectRoot, source)\n                    : source;\n                return source.split(path.sep).join('/');\n              }),\n              sourcesContent: new Array(parsedMap.sources.length).fill(null),\n              names: parsedMap.names,\n              mappings: parsedMap.mappings,\n            }),\n            targetDomain: 'server',\n          });\n        }\n        files.set(artifactFilename, {\n          contents: src,\n          targetDomain: 'server',\n        });\n      }\n      // Remap the manifest files to represent the output files.\n      route.file = artifactFilename;\n    }\n\n    return {\n      manifest: {\n        ...manifest,\n        htmlRoutes: prerenderManifest.htmlRoutes,\n      },\n      files,\n    };\n  }\n\n  async getExpoRouterRoutesManifestAsync({ appDir }: { appDir: string }) {\n    // getBuiltTimeServerManifest\n    const { exp } = getConfig(this.projectRoot);\n    const manifest = await fetchManifest(this.projectRoot, {\n      ...exp.extra?.router?.platformRoutes,\n      asJson: true,\n      appDir,\n    });\n\n    if (!manifest) {\n      throw new CommandError(\n        'EXPO_ROUTER_SERVER_MANIFEST',\n        'Unexpected error: server manifest could not be fetched.'\n      );\n    }\n\n    return manifest;\n  }\n\n  async getStaticRenderFunctionAsync(): Promise<{\n    serverManifest: ExpoRouterServerManifestV1;\n    manifest: ExpoRouterRuntimeManifest;\n    renderAsync: (path: string) => Promise<string>;\n  }> {\n    const url = this.getDevServerUrl()!;\n\n    const { getStaticContent, getManifest, getBuildTimeServerManifestAsync } =\n      await this.ssrLoadModule<typeof import('expo-router/build/static/renderStaticContent')>(\n        'expo-router/node/render.js'\n      );\n\n    const { exp } = getConfig(this.projectRoot);\n\n    return {\n      serverManifest: await getBuildTimeServerManifestAsync(),\n      // Get routes from Expo Router.\n      manifest: await getManifest({ preserveApiRoutes: false, ...exp.extra?.router }),\n      // Get route generating function\n      async renderAsync(path: string) {\n        return await getStaticContent(new URL(path, url));\n      },\n    };\n  }\n\n  async getStaticResourcesAsync({\n    includeSourceMaps,\n    mainModuleName,\n  }: {\n    includeSourceMaps?: boolean;\n    mainModuleName?: string;\n  } = {}) {\n    const { mode, minify, isExporting, baseUrl, reactCompiler, routerRoot, asyncRoutes } =\n      this.instanceMetroOptions;\n    assert(\n      mode != null &&\n        isExporting != null &&\n        baseUrl != null &&\n        routerRoot != null &&\n        reactCompiler != null &&\n        asyncRoutes != null,\n      'The server must be started before calling getStaticResourcesAsync.'\n    );\n\n    const platform = 'web';\n\n    const resolvedMainModuleName =\n      mainModuleName ?? '.' + path.sep + resolveMainModuleName(this.projectRoot, { platform });\n    return await this.metroImportAsArtifactsAsync(resolvedMainModuleName, {\n      splitChunks: isExporting && !env.EXPO_NO_BUNDLE_SPLITTING,\n      platform,\n      mode,\n      minify,\n      environment: 'client',\n      serializerIncludeMaps: includeSourceMaps,\n      mainModuleName: resolvedMainModuleName,\n      lazy: shouldEnableAsyncImports(this.projectRoot),\n      asyncRoutes,\n      baseUrl,\n      isExporting,\n      routerRoot,\n      reactCompiler,\n      bytecode: false,\n    });\n  }\n\n  private async getStaticPageAsync(pathname: string) {\n    const { mode, isExporting, baseUrl, reactCompiler, routerRoot, asyncRoutes } =\n      this.instanceMetroOptions;\n    assert(\n      mode != null &&\n        isExporting != null &&\n        baseUrl != null &&\n        reactCompiler != null &&\n        routerRoot != null &&\n        asyncRoutes != null,\n      'The server must be started before calling getStaticPageAsync.'\n    );\n    const platform = 'web';\n\n    const devBundleUrlPathname = createBundleUrlPath({\n      splitChunks: isExporting && !env.EXPO_NO_BUNDLE_SPLITTING,\n      platform,\n      mode,\n      environment: 'client',\n      reactCompiler,\n      mainModuleName: resolveMainModuleName(this.projectRoot, { platform }),\n      lazy: shouldEnableAsyncImports(this.projectRoot),\n      baseUrl,\n      isExporting,\n      asyncRoutes,\n      routerRoot,\n      bytecode: false,\n    });\n\n    const bundleStaticHtml = async (): Promise<string> => {\n      const { getStaticContent } = await this.ssrLoadModule<\n        typeof import('expo-router/build/static/renderStaticContent')\n      >('expo-router/node/render.js', {\n        minify: false,\n        mode,\n        isExporting,\n        platform,\n      });\n\n      const location = new URL(pathname, this.getDevServerUrl()!);\n      return await getStaticContent(location);\n    };\n\n    const [{ artifacts: resources }, staticHtml] = await Promise.all([\n      this.getStaticResourcesAsync(),\n      bundleStaticHtml(),\n    ]);\n    const content = serializeHtmlWithAssets({\n      isExporting,\n      resources,\n      template: staticHtml,\n      devBundleUrl: devBundleUrlPathname,\n      baseUrl,\n    });\n    return {\n      content,\n      resources,\n    };\n  }\n\n  // Set when the server is started.\n  private instanceMetroOptions: Partial<ExpoMetroOptions> = {};\n\n  private async ssrLoadModule<T extends Record<string, any>>(\n    filePath: string,\n    specificOptions: Partial<ExpoMetroOptions> = {}\n  ): Promise<T> {\n    const res = await this.ssrLoadModuleContents(filePath, specificOptions);\n    return evalMetroAndWrapFunctions<T>(this.projectRoot, res.src, res.filename);\n  }\n\n  private async metroImportAsArtifactsAsync(\n    filePath: string,\n    specificOptions: Partial<Omit<ExpoMetroOptions, 'serializerOutput'>> = {}\n  ) {\n    const results = await this.ssrLoadModuleContents(filePath, {\n      serializerOutput: 'static',\n      ...specificOptions,\n    });\n\n    // NOTE: This could potentially need more validation in the future.\n    if (results.artifacts && results.assets) {\n      return {\n        artifacts: results.artifacts,\n        assets: results.assets,\n        src: results.src,\n        filename: results.filename,\n        map: results.map,\n      };\n    }\n    throw new CommandError('Invalid bundler results: ' + results);\n  }\n\n  private async metroLoadModuleContents(\n    filePath: string,\n    specificOptions: ExpoMetroOptions,\n    extraOptions: {\n      sourceMapUrl?: string;\n      unstable_transformProfile?: TransformProfile;\n    } = {}\n  ) {\n    const { baseUrl } = this.instanceMetroOptions;\n    assert(baseUrl != null, 'The server must be started before calling metroLoadModuleContents.');\n\n    const opts: ExpoMetroOptions = {\n      // TODO: Possibly issues with using an absolute path here...\n      // mainModuleName: filePath,\n      lazy: false,\n      asyncRoutes: false,\n      inlineSourceMap: false,\n      engine: 'hermes',\n      minify: false,\n      // bytecode: false,\n      // Bundle in Node.js mode for SSR.\n      environment: 'node',\n      // platform: 'web',\n      // mode: 'development',\n      //\n      ...this.instanceMetroOptions,\n      baseUrl,\n      // routerRoot,\n      // isExporting,\n      ...specificOptions,\n    };\n\n    const expoBundleOptions = getMetroDirectBundleOptions(opts);\n\n    const resolverOptions = {\n      customResolverOptions: expoBundleOptions.customResolverOptions ?? {},\n      dev: expoBundleOptions.dev ?? true,\n    };\n\n    const transformOptions: TransformInputOptions = {\n      dev: expoBundleOptions.dev ?? true,\n      hot: true,\n      minify: expoBundleOptions.minify ?? false,\n      type: 'module',\n      unstable_transformProfile:\n        extraOptions.unstable_transformProfile ??\n        expoBundleOptions.unstable_transformProfile ??\n        'default',\n      customTransformOptions: expoBundleOptions.customTransformOptions ?? Object.create(null),\n      platform: expoBundleOptions.platform ?? 'web',\n      runtimeBytecodeVersion: expoBundleOptions.runtimeBytecodeVersion,\n    };\n\n    const resolvedEntryFilePath = await this.resolveRelativePathAsync(filePath, {\n      resolverOptions,\n      transformOptions,\n    });\n\n    // Use fully qualified URL with all options to represent the file path that's used for source maps and HMR. This prevents collisions.\n    const filename = createBundleUrlPath({\n      ...opts,\n      mainModuleName: resolvedEntryFilePath,\n    });\n\n    // https://github.com/facebook/metro/blob/2405f2f6c37a1b641cc379b9c733b1eff0c1c2a1/packages/metro/src/lib/parseOptionsFromUrl.js#L55-L87\n    const results = await this._bundleDirectAsync(resolvedEntryFilePath, {\n      graphOptions: {\n        lazy: expoBundleOptions.lazy ?? false,\n        shallow: expoBundleOptions.shallow ?? false,\n      },\n      resolverOptions,\n      serializerOptions: {\n        ...expoBundleOptions.serializerOptions,\n\n        inlineSourceMap: expoBundleOptions.inlineSourceMap ?? false,\n        modulesOnly: expoBundleOptions.modulesOnly ?? false,\n        runModule: expoBundleOptions.runModule ?? true,\n        // @ts-expect-error\n        sourceUrl: expoBundleOptions.sourceUrl,\n        // @ts-expect-error\n        sourceMapUrl: extraOptions.sourceMapUrl ?? expoBundleOptions.sourceMapUrl,\n      },\n      transformOptions,\n    });\n\n    return {\n      ...results,\n      filename,\n    };\n  }\n\n  private async ssrLoadModuleContents(\n    filePath: string,\n    specificOptions: Partial<ExpoMetroOptions> = {}\n  ) {\n    const { baseUrl, routerRoot, isExporting } = this.instanceMetroOptions;\n    assert(\n      baseUrl != null && routerRoot != null && isExporting != null,\n      'The server must be started before calling ssrLoadModuleContents.'\n    );\n\n    const opts: ExpoMetroOptions = {\n      // TODO: Possibly issues with using an absolute path here...\n      mainModuleName: filePath,\n      lazy: false,\n      asyncRoutes: false,\n      inlineSourceMap: false,\n      engine: 'hermes',\n      minify: false,\n      bytecode: false,\n      // Bundle in Node.js mode for SSR.\n      environment: 'node',\n      platform: 'web',\n      mode: 'development',\n      //\n      ...this.instanceMetroOptions,\n\n      // Mostly disable compiler in SSR bundles.\n      reactCompiler: false,\n      baseUrl,\n      routerRoot,\n      isExporting,\n\n      ...specificOptions,\n    };\n\n    // https://github.com/facebook/metro/blob/2405f2f6c37a1b641cc379b9c733b1eff0c1c2a1/packages/metro/src/lib/parseOptionsFromUrl.js#L55-L87\n    const { filename, bundle, map, ...rest } = await this.metroLoadModuleContents(filePath, opts);\n    const scriptContents = wrapBundle(bundle);\n\n    if (map) {\n      debug('Registering SSR source map for:', filename);\n      cachedSourceMaps.set(filename, { url: this.projectRoot, map });\n    } else {\n      debug('No SSR source map found for:', filename);\n    }\n\n    return {\n      ...rest,\n      src: scriptContents,\n      filename,\n      map,\n    };\n  }\n\n  async legacySinglePageExportBundleAsync(\n    options: Omit<\n      ExpoMetroOptions,\n      'baseUrl' | 'routerRoot' | 'asyncRoutes' | 'isExporting' | 'serializerOutput' | 'environment'\n    >,\n    extraOptions: {\n      sourceMapUrl?: string;\n      unstable_transformProfile?: TransformProfile;\n    } = {}\n  ): Promise<{ artifacts: SerialAsset[]; assets: readonly BundleAssetWithFileHashes[] }> {\n    const { baseUrl, routerRoot, isExporting } = this.instanceMetroOptions;\n    assert(\n      baseUrl != null && routerRoot != null && isExporting != null,\n      'The server must be started before calling legacySinglePageExportBundleAsync.'\n    );\n\n    const opts: ExpoMetroOptions = {\n      ...this.instanceMetroOptions,\n      baseUrl,\n      routerRoot,\n      isExporting,\n      ...options,\n      environment: 'client',\n      serializerOutput: 'static',\n    };\n\n    // https://github.com/facebook/metro/blob/2405f2f6c37a1b641cc379b9c733b1eff0c1c2a1/packages/metro/src/lib/parseOptionsFromUrl.js#L55-L87\n    if (!opts.mainModuleName.startsWith(path.sep)) {\n      opts.mainModuleName = '.' + path.sep + opts.mainModuleName;\n    }\n\n    const output = await this.metroLoadModuleContents(opts.mainModuleName, opts, extraOptions);\n\n    return {\n      artifacts: output.artifacts!,\n      assets: output.assets!,\n    };\n  }\n\n  async watchEnvironmentVariables() {\n    if (!this.instance) {\n      throw new Error(\n        'Cannot observe environment variable changes without a running Metro instance.'\n      );\n    }\n    if (!this.metro) {\n      // This can happen when the run command is used and the server is already running in another\n      // process.\n      debug('Skipping Environment Variable observation because Metro is not running (headless).');\n      return;\n    }\n\n    const envFiles = runtimeEnv\n      .getFiles(process.env.NODE_ENV)\n      .map((fileName) => path.join(this.projectRoot, fileName));\n\n    observeFileChanges(\n      {\n        metro: this.metro,\n        server: this.instance.server,\n      },\n      envFiles,\n      () => {\n        debug('Reloading environment variables...');\n        // Force reload the environment variables.\n        runtimeEnv.load(this.projectRoot, { force: true });\n      }\n    );\n  }\n\n  protected async startImplementationAsync(\n    options: BundlerStartOptions\n  ): Promise<DevServerInstance> {\n    options.port = await this.resolvePortAsync(options);\n    this.urlCreator = this.getUrlCreator(options);\n\n    const config = getConfig(this.projectRoot, { skipSDKVersionRequirement: true });\n    const { exp } = config;\n    const useServerRendering = ['static', 'server'].includes(exp.web?.output ?? '');\n    const baseUrl = getBaseUrlFromExpoConfig(exp);\n    const asyncRoutes = getAsyncRoutesFromExpoConfig(exp, options.mode ?? 'development', 'web');\n    const routerRoot = getRouterDirectoryModuleIdWithManifest(this.projectRoot, exp);\n    const reactCompiler = !!exp.experiments?.reactCompiler;\n    const appDir = path.join(this.projectRoot, routerRoot);\n    const mode = options.mode ?? 'development';\n\n    this.instanceMetroOptions = {\n      isExporting: !!options.isExporting,\n      baseUrl,\n      mode,\n      routerRoot,\n      reactCompiler,\n      minify: options.minify,\n      asyncRoutes,\n      // Options that are changing between platforms like engine, platform, and environment aren't set here.\n    };\n\n    const parsedOptions = {\n      port: options.port,\n      maxWorkers: options.maxWorkers,\n      resetCache: options.resetDevServer,\n    };\n\n    // Required for symbolication:\n    process.env.EXPO_DEV_SERVER_ORIGIN = `http://localhost:${options.port}`;\n\n    const { metro, server, middleware, messageSocket } = await instantiateMetroAsync(\n      this,\n      parsedOptions,\n      {\n        isExporting: !!options.isExporting,\n      }\n    );\n\n    const manifestMiddleware = await this.getManifestMiddlewareAsync(options);\n\n    // Important that we noop source maps for context modules as soon as possible.\n    prependMiddleware(middleware, new ContextModuleSourceMapsMiddleware().getHandler());\n\n    // We need the manifest handler to be the first middleware to run so our\n    // routes take precedence over static files. For example, the manifest is\n    // served from '/' and if the user has an index.html file in their project\n    // then the manifest handler will never run, the static middleware will run\n    // and serve index.html instead of the manifest.\n    // https://github.com/expo/expo/issues/13114\n    prependMiddleware(middleware, manifestMiddleware.getHandler());\n\n    middleware.use(\n      new InterstitialPageMiddleware(this.projectRoot, {\n        // TODO: Prevent this from becoming stale.\n        scheme: options.location.scheme ?? null,\n      }).getHandler()\n    );\n    middleware.use(new ReactDevToolsPageMiddleware(this.projectRoot).getHandler());\n    middleware.use(\n      new DevToolsPluginMiddleware(this.projectRoot, this.devToolsPluginManager).getHandler()\n    );\n\n    const deepLinkMiddleware = new RuntimeRedirectMiddleware(this.projectRoot, {\n      onDeepLink: getDeepLinkHandler(this.projectRoot),\n      getLocation: ({ runtime }) => {\n        if (runtime === 'custom') {\n          return this.urlCreator?.constructDevClientUrl();\n        } else {\n          return this.urlCreator?.constructUrl({\n            scheme: 'exp',\n          });\n        }\n      },\n    });\n    middleware.use(deepLinkMiddleware.getHandler());\n\n    middleware.use(new CreateFileMiddleware(this.projectRoot).getHandler());\n\n    // Append support for redirecting unhandled requests to the index.html page on web.\n    if (this.isTargetingWeb()) {\n      // This MUST be after the manifest middleware so it doesn't have a chance to serve the template `public/index.html`.\n      middleware.use(new ServeStaticMiddleware(this.projectRoot).getHandler());\n\n      // This should come after the static middleware so it doesn't serve the favicon from `public/favicon.ico`.\n      middleware.use(new FaviconMiddleware(this.projectRoot).getHandler());\n\n      if (useServerRendering) {\n        middleware.use(\n          createRouteHandlerMiddleware(this.projectRoot, {\n            appDir,\n            routerRoot,\n            config,\n            ...config.exp.extra?.router,\n            bundleApiRoute: (functionFilePath) => this.ssrImportApiRoute(functionFilePath),\n            getStaticPageAsync: (pathname) => {\n              return this.getStaticPageAsync(pathname);\n            },\n          })\n        );\n\n        observeAnyFileChanges(\n          {\n            metro,\n            server,\n          },\n          (events) => {\n            if (exp.web?.output === 'server') {\n              // NOTE(EvanBacon): We aren't sure what files the API routes are using so we'll just invalidate\n              // aggressively to ensure we always have the latest. The only caching we really get here is for\n              // cases where the user is making subsequent requests to the same API route without changing anything.\n              // This is useful for testing but pretty suboptimal. Luckily our caching is pretty aggressive so it makes\n              // up for a lot of the overhead.\n              this.invalidateApiRouteCache();\n            } else if (!hasWarnedAboutApiRoutes()) {\n              for (const event of events) {\n                if (\n                  // If the user did not delete a file that matches the Expo Router API Route convention, then we should warn that\n                  // API Routes are not enabled in the project.\n                  event.metadata?.type !== 'd' &&\n                  // Ensure the file is in the project's routes directory to prevent false positives in monorepos.\n                  event.filePath.startsWith(appDir) &&\n                  isApiRouteConvention(event.filePath)\n                ) {\n                  warnInvalidWebOutput();\n                }\n              }\n            }\n          }\n        );\n      } else {\n        // This MUST run last since it's the fallback.\n        middleware.use(\n          new HistoryFallbackMiddleware(manifestMiddleware.getHandler().internal).getHandler()\n        );\n      }\n    }\n    // Extend the close method to ensure that we clean up the local info.\n    const originalClose = server.close.bind(server);\n\n    server.close = (callback?: (err?: Error) => void) => {\n      return originalClose((err?: Error) => {\n        this.instance = null;\n        this.metro = null;\n        callback?.(err);\n      });\n    };\n\n    assertMetroPrivateServer(metro);\n    this.metro = metro;\n    return {\n      server,\n      location: {\n        // The port is the main thing we want to send back.\n        port: options.port,\n        // localhost isn't always correct.\n        host: 'localhost',\n        // http is the only supported protocol on native.\n        url: `http://localhost:${options.port}`,\n        protocol: 'http',\n      },\n      middleware,\n      messageSocket,\n    };\n  }\n\n  public async waitForTypeScriptAsync(): Promise<boolean> {\n    if (!this.instance) {\n      throw new Error('Cannot wait for TypeScript without a running server.');\n    }\n\n    return new Promise<boolean>((resolve) => {\n      if (!this.metro) {\n        // This can happen when the run command is used and the server is already running in another\n        // process. In this case we can't wait for the TypeScript check to complete because we don't\n        // have access to the Metro server.\n        debug('Skipping TypeScript check because Metro is not running (headless).');\n        return resolve(false);\n      }\n\n      const off = metroWatchTypeScriptFiles({\n        projectRoot: this.projectRoot,\n        server: this.instance!.server,\n        metro: this.metro,\n        tsconfig: true,\n        throttle: true,\n        eventTypes: ['change', 'add'],\n        callback: async () => {\n          // Run once, this prevents the TypeScript project prerequisite from running on every file change.\n          off();\n          const { TypeScriptProjectPrerequisite } = await import(\n            '../../doctor/typescript/TypeScriptProjectPrerequisite.js'\n          );\n\n          try {\n            const req = new TypeScriptProjectPrerequisite(this.projectRoot);\n            await req.bootstrapAsync();\n            resolve(true);\n          } catch (error: any) {\n            // Ensure the process doesn't fail if the TypeScript check fails.\n            // This could happen during the install.\n            Log.log();\n            Log.error(\n              chalk.red`Failed to automatically setup TypeScript for your project. Try restarting the dev server to fix.`\n            );\n            Log.exception(error);\n            resolve(false);\n          }\n        },\n      });\n    });\n  }\n\n  public async startTypeScriptServices() {\n    return startTypescriptTypeGenerationAsync({\n      server: this.instance?.server,\n      metro: this.metro,\n      projectRoot: this.projectRoot,\n    });\n  }\n\n  protected getConfigModuleIds(): string[] {\n    return ['./metro.config.js', './metro.config.json', './rn-cli.config.js'];\n  }\n\n  private pendingRouteOperations = new Map<\n    string,\n    Promise<{ src: string; filename: string; map: string } | null>\n  >();\n\n  // API Routes\n\n  // Bundle the API Route with Metro and return the string contents to be evaluated in the server.\n  private async bundleApiRoute(\n    filePath: string\n  ): Promise<{ src: string; filename: string; map: string } | null | undefined> {\n    if (this.pendingRouteOperations.has(filePath)) {\n      return this.pendingRouteOperations.get(filePath);\n    }\n    const bundleAsync = async () => {\n      try {\n        debug('Bundle API route:', this.instanceMetroOptions.routerRoot, filePath);\n        return await this.ssrLoadModuleContents(filePath);\n      } catch (error: any) {\n        const appDir = this.instanceMetroOptions?.routerRoot\n          ? path.join(this.projectRoot, this.instanceMetroOptions!.routerRoot!)\n          : undefined;\n        const relativePath = appDir ? path.relative(appDir, filePath) : filePath;\n\n        // Expected errors: invalid syntax, missing resolutions.\n        // Wrap with command error for better error messages.\n        const err = new CommandError(\n          'API_ROUTE',\n          chalk`Failed to bundle API Route: {bold ${relativePath}}\\n\\n` + error.message\n        );\n\n        for (const key in error) {\n          // @ts-expect-error\n          err[key] = error[key];\n        }\n\n        throw err;\n      } finally {\n        // pendingRouteOperations.delete(filepath);\n      }\n    };\n    const route = bundleAsync();\n\n    this.pendingRouteOperations.set(filePath, route);\n    return route;\n  }\n\n  private async ssrImportApiRoute(\n    filePath: string\n  ): Promise<null | Record<string, Function> | Response> {\n    // TODO: Cache the evaluated function.\n    try {\n      const apiRoute = await this.bundleApiRoute(filePath);\n\n      if (!apiRoute?.src) {\n        return null;\n      }\n      return evalMetroNoHandling(this.projectRoot, apiRoute.src, apiRoute.filename);\n    } catch (error) {\n      // Format any errors that were thrown in the global scope of the evaluation.\n      if (error instanceof Error) {\n        try {\n          const htmlServerError = await getErrorOverlayHtmlAsync({\n            error,\n            projectRoot: this.projectRoot,\n            routerRoot: this.instanceMetroOptions.routerRoot!,\n          });\n\n          return new Response(htmlServerError, {\n            status: 500,\n            headers: {\n              'Content-Type': 'text/html',\n            },\n          });\n        } catch (internalError) {\n          debug('Failed to generate Metro server error UI for API Route error:', internalError);\n          throw error;\n        }\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  private invalidateApiRouteCache() {\n    this.pendingRouteOperations.clear();\n  }\n\n  // Direct Metro access\n\n  // Emulates the Metro dev server .bundle endpoint without having to go through a server.\n  private async _bundleDirectAsync(\n    resolvedEntryFilePath: string,\n    {\n      transformOptions,\n      resolverOptions,\n      graphOptions,\n      serializerOptions,\n    }: {\n      transformOptions: TransformInputOptions;\n      resolverOptions: {\n        customResolverOptions: CustomResolverOptions;\n        dev: boolean;\n      };\n      serializerOptions: {\n        modulesOnly: boolean;\n        runModule: boolean;\n        sourceMapUrl: string;\n        sourceUrl: string;\n        inlineSourceMap: boolean;\n        excludeSource: boolean;\n      };\n      graphOptions: {\n        shallow: boolean;\n        lazy: boolean;\n      };\n    }\n  ): Promise<{\n    numModifiedFiles: number;\n    lastModifiedDate: Date;\n    nextRevId: string;\n    bundle: string;\n    map: string;\n\n    // Defined if the output is multi-bundle.\n    artifacts?: SerialAsset[];\n    assets?: readonly BundleAssetWithFileHashes[];\n  }> {\n    assert(this.metro, 'Metro server must be running to bundle directly.');\n    const config = this.metro._config;\n    const buildNumber = this.metro.getNewBuildNumber();\n    const bundlePerfLogger = config.unstable_perfLoggerFactory?.('BUNDLING_REQUEST', {\n      key: buildNumber,\n    });\n\n    const onProgress: MetroOnProgress = (transformedFileCount: number, totalFileCount: number) => {\n      this.metro?._reporter?.update?.({\n        buildID: getBuildID(buildNumber),\n        type: 'bundle_transform_progressed',\n        transformedFileCount,\n        totalFileCount,\n      });\n    };\n\n    const revPromise = this.getMetroRevision(resolvedEntryFilePath, {\n      graphOptions,\n      transformOptions,\n      resolverOptions,\n    });\n\n    bundlePerfLogger?.point('resolvingAndTransformingDependencies_start');\n    bundlePerfLogger?.annotate({\n      bool: {\n        initial_build: revPromise == null,\n      },\n    });\n    this.metro?._reporter.update({\n      buildID: getBuildID(buildNumber),\n      bundleDetails: {\n        bundleType: transformOptions.type,\n        dev: transformOptions.dev,\n        entryFile: resolvedEntryFilePath,\n        minify: transformOptions.minify,\n        platform: transformOptions.platform,\n        // @ts-expect-error: typed incorrectly upstream\n        customResolverOptions: resolverOptions.customResolverOptions,\n        customTransformOptions: transformOptions.customTransformOptions,\n      },\n      isPrefetch: false,\n      type: 'bundle_build_started',\n    });\n\n    try {\n      const { delta, revision } = await (revPromise != null\n        ? this.metro.getBundler().updateGraph(await revPromise, false)\n        : this.metro.getBundler().initializeGraph(\n            // NOTE: Using absolute path instead of relative input path is a breaking change.\n            // entryFile,\n            resolvedEntryFilePath,\n\n            transformOptions,\n            resolverOptions,\n            {\n              onProgress,\n              shallow: graphOptions.shallow,\n              // @ts-expect-error: typed incorrectly\n              lazy: graphOptions.lazy,\n            }\n          ));\n      bundlePerfLogger?.annotate({\n        int: {\n          graph_node_count: revision.graph.dependencies.size,\n        },\n      });\n      bundlePerfLogger?.point('resolvingAndTransformingDependencies_end');\n      bundlePerfLogger?.point('serializingBundle_start');\n\n      const shouldAddToIgnoreList = this.metro._shouldAddModuleToIgnoreList.bind(this.metro);\n\n      const serializer = this.getMetroSerializer();\n\n      const bundle = await serializer(\n        // NOTE: Using absolute path instead of relative input path is a breaking change.\n        // entryFile,\n        resolvedEntryFilePath,\n\n        revision.prepend as any,\n        revision.graph as any,\n        {\n          asyncRequireModulePath: await this.metro._resolveRelativePath(\n            config.transformer.asyncRequireModulePath,\n            {\n              relativeTo: 'project',\n              resolverOptions,\n              transformOptions,\n            }\n          ),\n          // ...serializerOptions,\n          processModuleFilter: config.serializer.processModuleFilter,\n          createModuleId: this.metro._createModuleId,\n          getRunModuleStatement: config.serializer.getRunModuleStatement,\n          includeAsyncPaths: graphOptions.lazy,\n          dev: transformOptions.dev,\n          projectRoot: config.projectRoot,\n          modulesOnly: serializerOptions.modulesOnly,\n          runBeforeMainModule: config.serializer.getModulesRunBeforeMainModule(\n            resolvedEntryFilePath\n            // path.relative(config.projectRoot, entryFile)\n          ),\n          runModule: serializerOptions.runModule,\n          sourceMapUrl: serializerOptions.sourceMapUrl,\n          sourceUrl: serializerOptions.sourceUrl,\n          inlineSourceMap: serializerOptions.inlineSourceMap,\n          serverRoot: config.server.unstable_serverRoot ?? config.projectRoot,\n          shouldAddToIgnoreList,\n\n          // @ts-expect-error: passed to our serializer to enable non-serial return values.\n          serializerOptions,\n        }\n      );\n\n      this.metro._reporter.update({\n        buildID: getBuildID(buildNumber),\n        type: 'bundle_build_done',\n      });\n\n      bundlePerfLogger?.point('serializingBundle_end');\n\n      let bundleCode: string | null = null;\n      let bundleMap: string | null = null;\n\n      // @ts-expect-error: If the output is multi-bundle...\n      if (serializerOptions.output === 'static') {\n        try {\n          const parsed = typeof bundle === 'string' ? JSON.parse(bundle) : bundle;\n\n          assert(\n            'artifacts' in parsed && Array.isArray(parsed.artifacts),\n            'Expected serializer to return an object with key artifacts to contain an array of serial assets.'\n          );\n\n          const artifacts = parsed.artifacts as SerialAsset[];\n          const assets = parsed.assets;\n\n          const bundleCode = artifacts.filter((asset) => asset.type === 'js')[0];\n          const bundleMap = artifacts.filter((asset) => asset.type === 'map')?.[0]?.source ?? '';\n\n          return {\n            numModifiedFiles: delta.reset\n              ? delta.added.size + revision.prepend.length\n              : delta.added.size + delta.modified.size + delta.deleted.size,\n            lastModifiedDate: revision.date,\n            nextRevId: revision.id,\n            bundle: bundleCode.source,\n            map: bundleMap,\n            artifacts,\n            assets,\n          };\n        } catch (error: any) {\n          throw new Error(\n            'Serializer did not return expected format. The project copy of `expo/metro-config` may be out of date. Error: ' +\n              error.message\n          );\n        }\n      }\n\n      if (typeof bundle === 'string') {\n        bundleCode = bundle;\n\n        // Create the source map in a second pass...\n        let { prepend, graph } = revision;\n        if (serializerOptions.modulesOnly) {\n          prepend = [];\n        }\n\n        bundleMap = await sourceMapStringAsync(\n          [\n            //\n            ...prepend,\n            ...this.metro._getSortedModules(graph),\n          ],\n          {\n            excludeSource: serializerOptions.excludeSource,\n            processModuleFilter: config.serializer.processModuleFilter,\n            shouldAddToIgnoreList,\n          }\n        );\n      } else {\n        bundleCode = bundle.code;\n        bundleMap = bundle.map;\n      }\n\n      return {\n        numModifiedFiles: delta.reset\n          ? delta.added.size + revision.prepend.length\n          : delta.added.size + delta.modified.size + delta.deleted.size,\n        lastModifiedDate: revision.date,\n        nextRevId: revision.id,\n        bundle: bundleCode,\n        map: bundleMap,\n      };\n    } catch (error) {\n      this.metro._reporter.update({\n        buildID: getBuildID(buildNumber),\n        type: 'bundle_build_failed',\n      });\n\n      throw error;\n    }\n  }\n\n  private getMetroSerializer() {\n    return (\n      this.metro?._config?.serializer.customSerializer ||\n      ((entryPoint, preModules, graph, options) =>\n        bundleToString(baseJSBundle(entryPoint, preModules, graph, options)).code)\n    );\n  }\n\n  private getMetroRevision(\n    resolvedEntryFilePath: string,\n    {\n      graphOptions,\n      transformOptions,\n      resolverOptions,\n    }: {\n      transformOptions: TransformInputOptions;\n      resolverOptions: {\n        customResolverOptions: CustomResolverOptions;\n        dev: boolean;\n      };\n      graphOptions: {\n        shallow: boolean;\n        lazy: boolean;\n      };\n    }\n  ) {\n    assert(this.metro, 'Metro server must be running to bundle directly.');\n    const config = this.metro._config;\n\n    const graphId = getGraphId(resolvedEntryFilePath, transformOptions, {\n      unstable_allowRequireContext: config.transformer.unstable_allowRequireContext,\n      resolverOptions,\n      shallow: graphOptions.shallow,\n      lazy: graphOptions.lazy,\n    });\n    return this.metro.getBundler().getRevisionByGraphId(graphId);\n  }\n\n  private async resolveRelativePathAsync(\n    moduleId: string,\n    {\n      resolverOptions,\n      transformOptions,\n    }: {\n      transformOptions: TransformInputOptions;\n      resolverOptions: {\n        customResolverOptions: CustomResolverOptions;\n        dev: boolean;\n      };\n    }\n  ) {\n    assert(this.metro, 'cannot invoke resolveRelativePathAsync without metro instance');\n    return await this.metro._resolveRelativePath(moduleId, {\n      relativeTo: 'server',\n      resolverOptions,\n      transformOptions,\n    });\n  }\n}\n\nfunction getBuildID(buildNumber: number): string {\n  return buildNumber.toString(36);\n}\n\nexport function getDeepLinkHandler(projectRoot: string): DeepLinkHandler {\n  return async ({ runtime }) => {\n    if (runtime === 'expo') return;\n    const { exp } = getConfig(projectRoot);\n    await logEventAsync('dev client start command', {\n      status: 'started',\n      ...getDevClientProperties(projectRoot, exp),\n    });\n  };\n}\n\nfunction wrapBundle(str: string) {\n  // Skip the metro runtime so debugging is a bit easier.\n  // Replace the __r() call with an export statement.\n  // Use gm to apply to the last require line. This is needed when the bundle has side-effects.\n  return str.replace(/^(__r\\(.*\\);)$/gm, 'module.exports = $1');\n}\n\nasync function sourceMapStringAsync(\n  modules: readonly import('metro/src/DeltaBundler/types').Module<any>[],\n  options: SourceMapGeneratorOptions\n): Promise<string> {\n  return (await sourceMapGeneratorNonBlocking(modules, options)).toString(undefined, {\n    excludeSource: options.excludeSource,\n  });\n}\n"],"names":["MetroBundlerDevServer","getDeepLinkHandler","debug","require","getGraphId","EXPO_GO_METRO_PORT","DEV_CLIENT_METRO_PORT","BundlerDevServer","metro","name","resolvePortAsync","options","port","devClient","Number","process","env","RCT_METRO_PORT","getFreePortAsync","exportExpoRouterApiRoutesAsync","includeSourceMaps","outputDir","prerenderManifest","routerRoot","instanceMetroOptions","assert","appDir","path","join","projectRoot","manifest","getExpoRouterRoutesManifestAsync","files","Map","route","apiRoutes","filepath","file","contents","bundleApiRoute","artifactFilename","relative","replace","src","map","artifactBasename","encodeURIComponent","basename","parsedMap","JSON","parse","set","stringify","version","sources","source","startsWith","split","sep","sourcesContent","Array","length","fill","names","mappings","targetDomain","htmlRoutes","exp","getConfig","fetchManifest","extra","router","platformRoutes","asJson","CommandError","getStaticRenderFunctionAsync","url","getDevServerUrl","getStaticContent","getManifest","getBuildTimeServerManifestAsync","ssrLoadModule","serverManifest","preserveApiRoutes","renderAsync","URL","getStaticResourcesAsync","mainModuleName","mode","minify","isExporting","baseUrl","reactCompiler","asyncRoutes","platform","resolvedMainModuleName","resolveMainModuleName","metroImportAsArtifactsAsync","splitChunks","EXPO_NO_BUNDLE_SPLITTING","environment","serializerIncludeMaps","lazy","shouldEnableAsyncImports","bytecode","getStaticPageAsync","pathname","devBundleUrlPathname","createBundleUrlPath","bundleStaticHtml","location","artifacts","resources","staticHtml","Promise","all","content","serializeHtmlWithAssets","template","devBundleUrl","filePath","specificOptions","res","ssrLoadModuleContents","evalMetroAndWrapFunctions","filename","results","serializerOutput","assets","metroLoadModuleContents","extraOptions","opts","inlineSourceMap","engine","expoBundleOptions","getMetroDirectBundleOptions","resolverOptions","customResolverOptions","dev","transformOptions","hot","type","unstable_transformProfile","customTransformOptions","Object","create","runtimeBytecodeVersion","resolvedEntryFilePath","resolveRelativePathAsync","_bundleDirectAsync","graphOptions","shallow","serializerOptions","modulesOnly","runModule","sourceUrl","sourceMapUrl","bundle","rest","scriptContents","wrapBundle","cachedSourceMaps","legacySinglePageExportBundleAsync","output","watchEnvironmentVariables","instance","Error","envFiles","runtimeEnv","getFiles","NODE_ENV","fileName","observeFileChanges","server","load","force","startImplementationAsync","urlCreator","getUrlCreator","config","skipSDKVersionRequirement","useServerRendering","includes","web","getBaseUrlFromExpoConfig","getAsyncRoutesFromExpoConfig","getRouterDirectoryModuleIdWithManifest","experiments","parsedOptions","maxWorkers","resetCache","resetDevServer","EXPO_DEV_SERVER_ORIGIN","middleware","messageSocket","instantiateMetroAsync","manifestMiddleware","getManifestMiddlewareAsync","prependMiddleware","ContextModuleSourceMapsMiddleware","getHandler","use","InterstitialPageMiddleware","scheme","ReactDevToolsPageMiddleware","DevToolsPluginMiddleware","devToolsPluginManager","deepLinkMiddleware","RuntimeRedirectMiddleware","onDeepLink","getLocation","runtime","constructDevClientUrl","constructUrl","CreateFileMiddleware","isTargetingWeb","ServeStaticMiddleware","FaviconMiddleware","createRouteHandlerMiddleware","functionFilePath","ssrImportApiRoute","observeAnyFileChanges","events","invalidateApiRouteCache","hasWarnedAboutApiRoutes","event","metadata","isApiRouteConvention","warnInvalidWebOutput","HistoryFallbackMiddleware","internal","originalClose","close","bind","callback","err","assertMetroPrivateServer","host","protocol","waitForTypeScriptAsync","resolve","off","metroWatchTypeScriptFiles","tsconfig","throttle","eventTypes","TypeScriptProjectPrerequisite","req","bootstrapAsync","error","Log","log","chalk","red","exception","startTypeScriptServices","startTypescriptTypeGenerationAsync","getConfigModuleIds","pendingRouteOperations","has","get","bundleAsync","undefined","relativePath","message","key","apiRoute","evalMetroNoHandling","htmlServerError","getErrorOverlayHtmlAsync","Response","status","headers","internalError","clear","_config","buildNumber","getNewBuildNumber","bundlePerfLogger","unstable_perfLoggerFactory","onProgress","transformedFileCount","totalFileCount","_reporter","update","buildID","getBuildID","revPromise","getMetroRevision","point","annotate","bool","initial_build","bundleDetails","bundleType","entryFile","isPrefetch","delta","revision","getBundler","updateGraph","initializeGraph","int","graph_node_count","graph","dependencies","size","shouldAddToIgnoreList","_shouldAddModuleToIgnoreList","serializer","getMetroSerializer","prepend","asyncRequireModulePath","_resolveRelativePath","transformer","relativeTo","processModuleFilter","createModuleId","_createModuleId","getRunModuleStatement","includeAsyncPaths","runBeforeMainModule","getModulesRunBeforeMainModule","serverRoot","unstable_serverRoot","bundleCode","bundleMap","parsed","isArray","filter","asset","numModifiedFiles","reset","added","modified","deleted","lastModifiedDate","date","nextRevId","id","sourceMapStringAsync","_getSortedModules","excludeSource","code","customSerializer","entryPoint","preModules","bundleToString","baseJSBundle","graphId","unstable_allowRequireContext","getRevisionByGraphId","moduleId","toString","logEventAsync","getDevClientProperties","str","modules","sourceMapGeneratorNonBlocking"],"mappings":"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"}